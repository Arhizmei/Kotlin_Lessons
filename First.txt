
Лекция №2 Типы данных и функции

Kotlin: NPE и Null Safety

fun main() {
    
    var st: String? //знак вопроса означает что может передаться null и мы вручную указываем что готовы к этому
    
    st = getSt()
    
    val size = st!!.length  // два знака восклицания указывают что сюда вернется null и мы соглашаемся с этим
    
    println (size)
    
}

fun getSt() : String? {  //знак вопроса означает что может передаться null и мы вручную указываем что готовы к этому
        
        return "Hello"
        
    }

Лекция №3 Операции, операторы и логические выражения.

10 % 3 -> остаток от деления, получим 1

a != b -> а не равно b

Лекция №4 Работа с циклами

Всем привет, хочу вот такие статьи вылаживать в линкедине. Как вам статья и есть ли в этом смысл если я хочу повысить свою популярность на линкедине.

Использование циклов в Kotlin: Диапазоны (Ranges), forEach, forEachIndexed и while

Циклы - это одна из важнейших концепций в программировании, которые позволяют нам выполнять повторяющиеся задачи и обрабатывать множество данных. В Kotlin существует несколько способов использования циклов, и одними из наиболее популярных являются forEach, forEachIndexed и конструкция while. Давайте рассмотрим, как они работают и когда их лучше всего использовать.

Диапазоны (Ranges) в Kotlin

Прежде чем мы перейдем к циклам, давайте обсудим диапазоны (Ranges). Диапазоны в программировании представляют собой набор последовательных значений или элементов между двумя точками или границами. В Kotlin вы можете создать диапазон, указав начальное и конечное значения. Например:

val range = 1..10 // Создание диапазона от 1 до 10 включительно

Теперь у нас есть диапазон чисел от 1 до 10 включительно. Диапазоны могут использоваться для итерации по значениям в циклах, фильтрации данных и других операциях, где важно работать с последовательными значениями.

for (i in 1..10) {

println(i) // Вывод чисел от 1 до 10

}

1. forEach: Итерация по коллекции

forEach - это метод, который позволяет итерироваться (перебирать) элементы в коллекциях, таких как списки или массивы, и выполнять определенную функцию или блок кода для каждого из них. Давайте посмотрим, как это работает:

val numbers = listOf(1, 2, 3, 4, 5)

numbers.forEach { number ->

println(number)

}

В этом примере мы выводим каждый элемент списка numbers с помощью forEach. Этот метод удобен, когда вам нужно выполнить одну и ту же операцию для каждого элемента коллекции.

2. forEachIndexed: Итерация с индексами

forEachIndexed - это метод, аналогичный forEach, но он также предоставляет доступ к индексу каждого элемента в коллекции. Это полезно, когда вам нужно знать не только сами элементы, но и их позиции. Вот пример использования forEachIndexed:

val numbers = listOf(1, 2, 3, 4, 5)

numbers.forEachIndexed { index, number ->

println("Элемент с индексом $index равен $number")

}

В этом примере мы выводим индекс и значение каждого элемента списка numbers. Это может быть полезно при поиске определенного элемента по его позиции в коллекции.

3. while: Повторение с условием

Конструкция while позволяет выполнять блок кода, пока заданное условие остается истинным. Она часто используется для итерации, когда точное количество итераций не известно заранее. Вот пример использования while:

var i = 0

while (i < 5) {

println(i)

i++

}

В этом примере мы выводим числа от 0 до 4, пока переменная i остается меньше 5. while полезен, когда вы хотите выполнить какое-то действие до тех пор, пока условие выполняется.

Заключение

Циклы являются мощным инструментом в программировании, который помогает обрабатывать данные и выполнять повторяющиеся задачи. В Kotlin, forEach, forEachIndexed и while предоставляют разные способы итерации и выбор зависит от вашей конкретной задачи. Экспериментируйте с ними и используйте их с умом, чтобы сделать ваш код более эффективным и читаемым.



Пример вывода массива через оператор for

fun main() {

val list : Array<Int> = arrayOf(1,2,3,4,5,6)

for(i in 0 until list.size){

println(list[i])

}

}

Пример использования оператора while

fun main() {

var isDownload = false

var i = 0

while (!isDownload) {

println("Downloading...")

i++

if (i == 9) {

isDownload = true }

} }

Лекция №5 Работа с массивами

fun main() { 
 val names = arrayOf("John", "Peter", "Mary") 
println(names.get(2)) // получаем 3 элемент в массиве
names.set(0, "Bob")  // устанавливаем первым элементом в массиве наши данные
println(names[0]) 
}

--------------------------------------------------------------------------------------------------
fun main() {
    
 val names = arrayOf("John", "Peter", "Mary")   
    
    for ( element in names ) {  
println(element)  
}  
names.forEach { el -> println{el} } // работаем с каждым элементом по порядку
        
    }